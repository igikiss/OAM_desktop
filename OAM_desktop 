from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QToolTip, QMessageBox, QDesktopWidget, QMainWindow, QAction, qApp, QTextEdit, QLabel, QGridLayout, QWidget, QFileDialog, QFrame
from PyQt5.QtGui import QIcon, QFont, QPixmap, QCursor
from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import numpy as np
import pyqtgraph as pg
import sys
from datetime import timedelta
import time

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.title = "OAM Desktop"
        self.top = 50
        self.left = 400
        self.width = 1800
        self.height = 1000
        self.InitWindow()

    def InitWindow(self):
        self.setWindowIcon(QIcon("icon.png"))
        self.setWindowTitle(self.title)
        self.setGeometry(self.top, self.left, self.width, self.height)
        
        self.label = QLabel(self)
        self.label_1 = QLabel('VAPOTHERM OAM VIEWER', self)
        self.label_1.setFont(QFont('Arial', 40, QFont.Bold))
        self.label_1.resize(600, 100)
        self.label_1.setStyleSheet("color: rgb(30, 195, 225);")
        self.label_1.move(600, 50)
        self.label_1.setAlignment(QtCore.Qt.AlignCenter)
        
        self.l_button = QPushButton('Load File', self)
        self.l_button.move(800, 200)
        self.l_button.resize(200, 50)
        self.l_button.setFont(QFont('Arial', 20, QFont.Bold))
        self.l_button.setStyleSheet("background-color: rgb(30, 195, 225);")
        self.l_button.clicked.connect(self.load_file)
   
        self.label_2 = QLabel(self)
        self.label_2.setFrameStyle(QFrame.Box | QFrame.Plain)
        self.label_2.setLineWidth(2)
        self.label_2.resize(200, 100)
        self.label_2.move(50, 50)
        self.label_2.setStyleSheet("background-color: rgb(255, 255, 255);")

        self.pw = pg.PlotWidget(self, axisItems={'bottom': pg.DateAxisItem()})
        self.pw.setGeometry(50, 300, 1600, 400)
        self.pw.showGrid(x=True, y=True)
        self.pw.setLabel('left', 'SpO2', units='%')
        self.pw.setLabel('bottom', 'Time', units='h')
        self.pw.setTitle('SpO2')
        self.pw.enableAutoRange(axis='x', enable=True)
        self.pw.enableAutoRange(axis='y', enable=True)
        self.pw.addLegend()

        self.pw_2 = pg.PlotWidget(self, axisItems={'bottom': pg.DateAxisItem()})
        self.pw_2.setGeometry(50, 700, 1600, 400)
        self.pw_2.showGrid(x=True, y=True)
        self.pw_2.setLabel('left', 'Signal', units='I/Q')   
        self.pw_2.setLabel('bottom', 'Time', units='h')
        self.pw_2.setTitle('Signal')
        self.pw_2.enableAutoRange(axis='x', enable=True)
        self.pw_2.enableAutoRange(axis='y', enable=True)
        self.pw_2.addLegend()


    def load_file(self):
        fname = QFileDialog.getOpenFileName(self, 'Open file', '\home', "CSV files (*.csv)")
        if fname[0]:
            df = pd.read_csv(fname[0], encoding='unicode_escape', skiprows=1, usecols=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,13]).dropna()
            df['DateTime'] = pd.to_datetime(df['DateTime'])
            #set DateTime as index
            df.set_index('DateTime', inplace=True)
            df.columns = df.columns.str.replace(' ', '_')
            modes = df['O2_Mode'].unique()
            print(modes)
            print(df.columns)
    
        def signal_filter(df, min_signal, min_spo2):
            """Filter DataFrame by signal strength and SpO2"""
            return df[(df['Signal_I/Q'] >= min_signal) & (df['SpO2'] >= min_spo2)]

        df = signal_filter(df, 80, 40)
        
        def filter_o2_mode(df, mode):
            """Filter DataFrame by O2 mode"""
            return df[df['O2_Mode'] == mode] 

        df_m = filter_o2_mode(df, 'Manual')
        df_a = filter_o2_mode(df, 'Auto')
        print(df_m, df_a)

        def elapsed_time(dff):
            count = int(dff['O2'].count())
            return timedelta(seconds=count)

        ta = elapsed_time(df_a)
        tm = elapsed_time(df_m)
        print(ta, tm)

        def avarage_value(df, column):
            """Calculate average value of a column in a DataFrame"""
            return round(df[column].mean(), 2)            

        df_avg_a = avarage_value(df_a, 'O2')
        df_avg_m = avarage_value(df_m, 'O2')

        def rolling_average(df, column):
            """Rolling average DataFrame by O2 mode"""
            return df[column].rolling('1H').mean()

        df_m['1h_Rolling_Average'] = rolling_average(df_m, 'SpO2')
        df_a['1h_Rolling_Average'] = rolling_average(df_a, 'SpO2')
        print(df_a)
        print(df_avg_a, df_avg_m)
      

  
        self.label_2.setText(f"<p style='font-size:12pt'>Avarege FiO2 in Auto mode</p><p style='font-size:16pt'>{avarage_value(df_a, 'O2')}</p>")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setStyleSheet("background-color: rgb(255, 255, 255);")


        #self.pw.plot(df_a.index, df_a['SpO2'], pen='#21221f', mame='SpO2')
        #create a plot for each mode and add to plot widget x axis is DateTime, y axis is SpO2
        #self.pw.plot(df_a['SpO2'], pen='r', name='Auto')
        #highlight the SpO2 values that are below 90 with different color and above 90 with different color
        self.pw.plot(df_a['SpO2'], pen='r', name='SpO2')
        #plot second y axis in the same plot widget
        self.pw.plot(df_a['1h_Rolling_Average'], pen='g', name='1h_Rolling_Average')
        #self.pw.plot(df_m['SpO2'], pen='b', name='Manual')
       
        
            


def main():
    app = QtWidgets.QApplication(sys.argv)
    main =MainWindow()
    main.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()