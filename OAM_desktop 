import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton, QFileDialog
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon, QFont, QPixmap, QCursor
import OAMFile
import OAMDataMan 
import pyqtgraph as pg



class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.title = ("OAM Desktop")
        self.screen = QtWidgets.QDesktopWidget().screenGeometry()
        self.width = self.screen.width()
        self.height = self.screen.height()
        self.top = self.screen.height()
        self.left = self.screen.width()
        self.setGeometry(0, 0, self.width, self.height)
        self.InitWindow()
        self.showMaximized()

    def InitWindow(self):
        self.setWindowTitle(self.title)
        self.setGeometry(self.top, self.left, self.width, self.height)
        
        self.label = QLabel(self)
        self.label_1 = QLabel('VAPOTHERM OAM VIEWER', self)
        self.label_1.setFont(QFont('Arial', 40, QFont.Bold))
        self.label_1.resize(600, 50)
        self.label_1.setStyleSheet("color: rgb(30, 195, 225);")
        self.label_1.move(700, 50)
      
       
        self.l_button = QPushButton('Load File', self)
        self.l_button.move(50, 150)
        self.l_button.resize(200, 50)
        self.l_button.setFont(QFont('Arial', 20, QFont.Bold))
        self.l_button.setStyleSheet("background-color: rgb(30, 195, 225);")
        self.l_button.clicked.connect(self.load_file)
        self.l_button.setCursor(QCursor(QtCore.Qt.PointingHandCursor))

        self.pdf_button = QPushButton('Export PDF', self)
        self.pdf_button.move(50, 200)
        self.pdf_button.resize(200, 50)
        self.pdf_button.setFont(QFont('Arial', 20, QFont.Bold))
        self.pdf_button.setStyleSheet("background-color: rgb(30, 195, 225);")
        #self.pdf_button.clicked.connect(self.export_pdf)
        self.pdf_button.setCursor(QCursor(QtCore.Qt.PointingHandCursor))

        self.bar_plot_1 = pg.PlotWidget(self)
        self.bar_plot_1.move(300, 150)
        self.bar_plot_1.resize(300, 300)
        self.bar_plot_1.setBackground('w')  
        self.bar_plot_1.showGrid(x=True, y=True)
        self.bar_plot_1.setMouseEnabled(x=False, y=False)
        self.bar_plot_1.setMenuEnabled(False)
        self.bar_plot_1.setLogMode(x=False, y=False)
        self.bar_plot_1.setClipToView(True)
        self.bar_plot_1.setAntialiasing(True)
        self.bar_plot_1.setLimits(xMin=0, xMax=100, yMin=0, yMax=100)

        self.pw = pg.PlotWidget(self, axisItems={'bottom': pg.DateAxisItem()})
        self.pw.setGeometry(50, 500, 1800, 250)
        self.pw.showGrid(x=True, y=True)
        self.pw.setLabel('left', 'SpO2', units='%')
        self.pw.setLabel('bottom', 'Time', units='h')
        self.pw.setTitle('SpO2')
        self.pw.enableAutoRange(axis='x', enable=True)
        self.pw.enableAutoRange(axis='y', enable=True)
        self.pw.addLegend()
        self.pw.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        self.pw2 = pg.PlotWidget(self, background='w')
        self.pw2.setGeometry(50, 800, 1800, 250)
        self.pw2.showGrid(x=True, y=True)
        self.pw2.addLegend()
        self.pw2.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        
      
        #bar_graph = pg.BarGraphItem(x=xval, height=df_p['Percentage'], width=0.5)
        #self.bar_plot_1.getAxis('bottom').setTicks(ticks)
        #self.bar_plot_1.addItem(bar_graph)

       
        # if data were not load from file thne continue

    def load_file(self):
        """Load file from OAMFile class"""
        return OAMFile.LoadFile().get_file()

    data = OAMDataMan.DataAnalysis()




app = QApplication(sys.argv)
if __name__ == '__main__':
    window = MainWindow()
    sys.exit(app.exec_())